{ config, lib, pkgs, ... }:

with lib;

let
  podman-lib = import ./podman-lib.nix { inherit lib; };

  createQuadletSource = name: containerDef:
    let
      cfg = (lib.recursiveUpdate {
        Container = {
          AddCapabiility = containerDef.addCapabilities;
          AddDevice = containerDef.devices;
          AutoUpdate = containerDef.autoUpdate;
          ContainerName = name;
          DropCapability = containerDef.dropCapabilities;
          Exec = containerDef.exec;
          Image = containerDef.image;
          Label = (lib.recursiveUpdate { "nix.home-manager.managed" = true; }
            containerDef.labels);
          Network = (if (builtins.elem containerDef.networkMode [ "host" ]) then
            [ containerDef.networkMode ]
          else
            containerDef.networks);
          PodmanArgs = containerDef.extraPodmanArgs
            ++ (map (alias: "--network-alias ${alias}")
              containerDef.networkAliases)
            ++ (if (builtins.isString containerDef.entrypoint) then
              [ "--entrypoint ${containerDef.entrypoint}" ]
            else
              [ ]);
          PublishPort = containerDef.ports;
          Volume = containerDef.volumes;
        };
        Install = {
          WantedBy = (if containerDef.autoStart then [
            "default.target"
            "multi-user.target"
          ] else
            [ ]);
        };
        Service = {
          Environment = (lib.recursiveUpdate {
            PATH = "/run/wrappers/bin:" + "/run/current-system/sw/bin:"
              + "${config.home.homeDirectory}/.nix-profile/bin";
          } containerDef.environment);
          EnvironmentFile = containerDef.environmentFiles;
          Restart = "always";
          TimeoutStopSec = 30;
        };
        Unit = {
          After = [ "network.target" ]
            ++ (map (network: "podman-${network}-network.service")
              containerDef.networks);
          Requires = (map (network: "podman-${network}-network.service")
            containerDef.networks);
          Description = (if (builtins.isString containerDef.description) then
            containerDef.description
          else
            "Service for container ${name}");
        };
      } containerDef.extraConfig);
    in ''
      # Automatically generated by home-manager podman container configuration
      # DO NOT EDIT THIS FILE DIRECTLY
      #
      # ${name}.container
      ${podman-lib.toQuadletIni cfg}
    '';

  toQuadletInternal = name: containerDef:
    let
      allAssertions = (map (section:
        if builtins.hasAttr section containerDef.extraConfig then
          (podman-lib.buildConfigAsserts name section
            containerDef.extraConfig."${section}")
        else
          [ ]) [ "Container" "Install" "Service" "Unit" ]);
    in {
      assertions = allAssertions;
      resourceType = "container";
      serviceName =
        "podman-${name}"; # quadlet service name: 'podman-<name>.service'
      source =
        podman-lib.removeBlankLines (createQuadletSource name containerDef);
    };

in let
  # Define the container user type as the user interface
  containerDefinitionType = types.submodule {
    options = {

      addCapabilities = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "The capabilities to add to the container.";
        example = literalMD ''
          `addCapabilities = [ "CAP_DAC_OVERRIDE" "CAP_IPC_OWNER" ];`
        '';
      };

      autoStart = mkOption {
        type = types.bool;
        default = true;
        description =
          "Whether to start the container on boot (requires user lingering).";
      };

      autoUpdate = mkOption {
        type = with types; enum [ "" "registry" "local" ];
        default = "";
        description = "The autoupdate policy for the container.";
        example = literalMD ''
          `autoUpdate = "registry";`
        '';
      };

      description = mkOption {
        type = with types; nullOr str;
        description = "The description of the container.";
        default = null;
        example = literalMD ''
          `description = "My Container";`
        '';
      };

      devices = mkOption {
        type = types.listOf types.str;
        default = [ ];
        description = "The devices to mount into the container";
        example = literalMD ''
          `devices = [ "/dev/<host>:/dev/<container>" ];`
        '';
      };

      dropCapabilities = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "The capabilities to drop from the container.";
        example = literalMD ''
          `dropCapabilities = [ "CAP_DAC_OVERRIDE" "CAP_IPC_OWNER" ];`
        '';
      };

      entrypoint = mkOption {
        type = with types; nullOr str;
        description = "The container entrypoint.";
        default = null;
        example = literalMD ''
          `entrypoint = "/foo.sh";`
        '';
      };

      environment = mkOption {
        type = podman-lib.primitiveAttrs;
        description = "Environment variables to set in the container.";
        default = { };
        example = literalMD ''
          ```
          environment = {
            VAR1 = "0:100";
            VAR2 = true;
            VAR3 = 5;
          };
          ```
        '';
      };

      environmentFiles = mkOption {
        type = with types; listOf str;
        default = [ ];
        description =
          "Paths to files containing container environment variables.";
        example = literalMD ''
          `environmentFiles = [ "/etc/environment" ];`
        '';
      };

      exec = mkOption {
        type = with types; nullOr str;
        description = "The command to run after the container start.";
        default = null;
        example = literalMD ''
          `exec = "sleep inf";`
        '';
      };

      extraPodmanArgs = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "Extra arguments to pass to the podman run command.";
      };

      extraConfig = mkOption {
        type = podman-lib.extraConfigType;
        default = { };
        description =
          "INI sections and values to populate the Container Quadlet";
        example = literalMD ''
          ```
          extraConfig = {
            Container = {
              User = 1000;
            };
            Service = {
              TimeoutStartSec = 15;
            };
          };
          ```
        '';
      };

      image = mkOption {
        type = types.str;
        description = "The container image.";
        example = literalMD ''
          `image = "registry.access.redhat.com/ubi9-minimal:latest";`
        '';
      };

      labels = mkOption {
        type = with types; attrsOf str;
        default = { };
        description = "The labels to apply to the container.";
        example = literalMD ''
          ```
          labels = {
            app = "myapp";
            "some-label" = "somelabel";
          };
          ```
        '';
      };

      networkMode = mkOption {
        type = with types; nullOr str;
        default = null;
        description = "The network mode for the container.";
        example = literalMD ''
          `networkMode = "host";`
        '';
      };

      networks = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "The networks to connect the container to. "
          + "Best that these networks are defined with services.podman.networks.";
        example = literalMD ''
          `networks = [ "mynet" ];`
        '';
      };

      networkAliases = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "Network aliases for the container.";
        example = literalMD ''
          `networkAliases = [ "mycontainer" "web" ];`
        '';
      };

      ports = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "A mapping of ports between host and container";
        example = literalMD ''
          `ports = [ "8080:80" ];`
        '';
      };

      volumes = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "The volumes to mount into the container.";
        example = literalMD ''
          ```
          volumes = [
            "/tmp:/tmp"
            "/var/run/test.secret:/etc/secret:ro"
          ];
          ```
        '';
      };
    };
  };

in {

  imports = [ ./options.nix ];

  options.services.podman.containers = mkOption {
    type = types.attrsOf containerDefinitionType;
    default = { };
    description = "Defines Podman container quadlet configurations.";
  };

  config = let
    containerQuadlets =
      mapAttrsToList toQuadletInternal config.services.podman.containers;
  in mkIf pkgs.stdenv.isLinux {
    internal.podman-quadlet-definitions = containerQuadlets;
    assertions =
      flatten (map (container: container.assertions) containerQuadlets);

    # manifest file
    home.file."${config.xdg.configHome}/podman/containers.manifest".text =
      podman-lib.generateManifestText containerQuadlets;
  };
}
