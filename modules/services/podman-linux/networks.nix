{ config, lib, pkgs, ... }:

with lib;

let
  podman-lib = import ./podman-lib.nix { inherit lib; };

  createQuadletSource = name: networkDef:
    let
      ### Helpers
      ifAttrList = podman-lib.sourceHelpers.ifAttrList;
      ifAttrSet = podman-lib.sourceHelpers.ifAttrSet;
      ifAttrString = podman-lib.sourceHelpers.ifAttrString;
      ifNotNull = podman-lib.sourceHelpers.ifNotNull;
      ifNotEmptyList = podman-lib.sourceHelpers.ifNotEmptyList;
      ifNotEmptySet = podman-lib.sourceHelpers.ifNotEmptySet;
      ###

      ### Formatters
      formatExtraConfig = podman-lib.formatExtraConfig;
      formatLabels = podman-lib.formatLabels;
      ###

      podmanPkg = "${config.services.podman.package}/bin/podman";
      truePkg = "${pkgs.coreutils}/bin/true";
      awaitPodmanUnshare = pkgs.writeShellScriptBin "await-podman-unshare" ''
        until ${podmanPkg} unshare ${truePkg}; do
          sleep 1;
        done
      '';
    in ''
      # Automatically generated by home-manager for podman network configuration
      # DO NOT EDIT THIS FILE DIRECTLY
      #
      # ${name}.network
      [Unit]
      ${formatExtraConfig networkDef.extraUnitConfig "Unit"}

      [Network]
      ${if (ifAttrString networkDef.extraNetworkConfig "Driver" != "") then
        "Driver=${networkDef.extraNetworkConfig.Driver}"
      else
        ifNotNull networkDef.driver "Driver=${networkDef.driver}"}
      ${if (ifAttrString networkDef.extraNetworkConfig "Gateway" != "") then
        "Gateway=${networkDef.extraNetworkConfig.Gateway}"
      else
        ifNotNull networkDef.gateway "Gateway=${networkDef.gateway}"}
      ${ifNotEmptyList
      (networkDef.labels ++ (ifAttrList networkDef.extraNetworkConfig "Label"))
      (formatLabels (networkDef.labels
        ++ (ifAttrList networkDef.extraNetworkConfig "Label")))}
      NetworkName=${
        if (builtins.hasAttr "NetworkName" networkDef.extraNetworkConfig) then
          networkDef.extraNetworkConfig.NetworkName
        else
          name
      }
      ${if (ifAttrString networkDef.extraNetworkConfig "Subnet" != "") then
        "Subnet=${networkDef.extraNetworkConfig.Subnet}"
      else
        ifNotNull networkDef.subnet "Subnet=${networkDef.subnet}"}
      ${formatExtraConfig networkDef.extraNetworkConfig "Network"}

      [Service]
      Environment=PATH=${podman-lib.newuidmapPaths}:${
        makeBinPath [ pkgs.su pkgs.coreutils ]
      }
      ExecStartPre=${awaitPodmanUnshare}
      TimeoutStartSec=15
      RemainAfterExit=yes
      ${formatExtraConfig networkDef.extraServiceConfig "Service"}

      [Install]
      WantedBy=multi-user.target default.target
      ${formatExtraConfig networkDef.extraInstallConfig "Install"}

    '';

  toQuadletInternal = name: networkDef:
    let
      networkConfigAssertions = name: networkDef: {
        NetworkName = with types; enum [ "" name ];
      };
    in {
      serviceName =
        "podman-${name}"; # quadlet service name: 'podman-<name>-network.service'
      source =
        podman-lib.removeBlankLines (createQuadletSource name networkDef);
      resourceType = "network";
      assertions = podman-lib.buildConfigAsserts name networkDef
        (networkConfigAssertions name networkDef);
    };

in let
  networkDefinitionType = types.submodule {
    options = {

      driver = mkOption {
        type = with types; nullOr str;
        default = null;
        description = "The network driver to use.";
        example = literalMD ''
          `driver = "bridge";`
        '';
      };

      extraInstallConfig = mkOption {
        type = podman-lib.primitiveAttrs;
        default = { };
        description = "Extra configs for network quadlet's Install section.";
        example = literalMD ''
          ```
            extraInstallConfig = {
              WantedBy = [ "multi-user.target" "default.target" ];
            };
          ```
        '';
      };

      extraNetworkConfig = mkOption {
        type = podman-lib.primitiveAttrs;
        default = { };
        description = "Extra configs for network quadlet's Network section.";
        example = literalMD ''
          ```
          extraNetworkConfig = {
            IPv6 = true;
            Options = "isolate=true";
            PodmanArgs = [ "--dns=192.168.55.1" ];
          };
          ```
        '';
      };

      extraServiceConfig = mkOption {
        type = podman-lib.primitiveAttrs;
        default = { };
        description = "Extra configs for network quadlet's Service section.";
        example = literalMD ''
          ```
            extraServiceConfig = {
              TimeoutStartSec = 15;
            };
          ```
        '';
      };

      extraUnitConfig = mkOption {
        type = podman-lib.primitiveAttrs;
        default = { };
        description = "Extra configs for network quadlet's Unit section.";
        example = literalMD ''
          ```
            extraUnitConfig = {
              Description = "My network configuration file";
            };
          ```
        '';
      };

      gateway = mkOption {
        type = with types; nullOr str;
        default = null;
        description = "The gateway IP to use for the network.";
        example = literalMD ''
          `gateway = "192.168.20.1";`
        '';
      };

      labels = mkOption {
        type = with types; listOf str;
        default = [ ];
        description = "The labels to apply to the container.";
        example = literalMD ''
          ```
          labels = {
            app = "myapp";
            "some-label" = "somelabel";
          };
          ```
        '';
      };

      subnet = mkOption {
        type = with types; nullOr str;
        default = null;
        description = "The subnet to use for the network.";
        example = literalMD ''
          `subnet = "192.168.20.0/24";`
        '';
      };

    };
  };
in {
  options.services.podman.networks = mkOption {
    type = types.attrsOf networkDefinitionType;
    default = { };
    description = "Defines Podman network quadlet configurations.";
  };

  config = let
    networkQuadlets =
      mapAttrsToList toQuadletInternal config.services.podman.networks;
  in mkIf pkgs.stdenv.isLinux {
    internal.podman-quadlet-definitions = networkQuadlets;
    assertions = flatten (map (network: network.assertions) networkQuadlets);

    # manifest file
    home.file."${config.xdg.configHome}/podman/networks.manifest".text =
      podman-lib.generateManifestText networkQuadlets;
  };
}
