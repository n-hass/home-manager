{ config, lib, pkgs, ... }:

with lib;

let
  podman-lib = import ./podman-lib.nix { inherit lib; };

  ifNotNull = podman-lib.sourceHelpers.ifNotNull;
  ifNotEmptyList = podman-lib.sourceHelpers.ifNotEmptyList;
  ifNotEmptySet = podman-lib.sourceHelpers.ifNotEmptySet;

  createQuadletSource = name: networkDef: ''
    # Automatically generated by home-manager for podman network configuration
    # DO NOT EDIT THIS FILE DIRECTLY
    #
    # ${name}.network
    [Network]
    Label=nix.home-manager.managed=true
    NetworkName=${name}
    ${ifNotNull networkDef.driver "Driver=${networkDef.driver}"}
    ${ifNotNull networkDef.subnet "Subnet=${networkDef.subnet}"}
    ${ifNotNull networkDef.gateway "Gateway=${networkDef.gateway}"}
    ${podman-lib.formatExtraConfig networkDef.extraNetworkConfig}

    [Install]
    WantedBy=multi-user.target default.target

    [Service]
    Environment=PATH=${podman-lib.newuidmapPaths}:${
      makeBinPath [ pkgs.su pkgs.coreutils ]
    }
    ExecStartPre=${pkgs.bash}/bin/bash -c 'until ${config.services.podman.package}/bin/podman unshare ${pkgs.coreutils}/bin/true; do sleep 1; done'
    TimeoutStartSec=15
    RemainAfterExit=yes
  '';

  networkConfigAssertions = name: networkDef: {
    NetworkName = with types; enum [ "" name ];
  };

  toQuadletInternal = name: networkDef: {
    serviceName =
      "podman-${name}"; # quadlet generater makes systemd name 'podman-<name>-network.service'
    source = podman-lib.removeBlankLines (createQuadletSource name networkDef);
    resourceType = "network";
    assertions = podman-lib.buildConfigAsserts name networkDef
      (networkConfigAssertions name networkDef);
  };

in {
  options = let
    networkDefinitionType = types.submodule {
      options = {

        driver = mkOption {
          type = with types; nullOr str;
          default = null;
          description = "The network driver to use.";
          example = "bridge";
        };

        subnet = mkOption {
          type = with types; nullOr str;
          default = null;
          description = "The subnet to use for the network.";
          example = "192.168.20.0/24";
        };

        gateway = mkOption {
          type = with types; nullOr str;
          default = null;
          description = "The gateway IP to use for the network.";
          example = "192.168.20.1";
        };

        extraNetworkConfig = mkOption {
          type = podman-lib.primitiveAttrs;
          default = { };
          description =
            "Extra configuration for the network, in Podman Quadlet format.";
          example = literalMD ''
            ```
            extraNetworkConfig = {
              IPv6 = true;
              Options = "isolate=true";
              PodmanArgs = [ "--dns=192.168.55.1" ];
            };
            ```
          '';
        };
      };
    };
  in {
    services.podman.networks = mkOption {
      type = types.attrsOf networkDefinitionType;
      default = { };
      description = "Defines Podman network quadlet configurations.";
    };
  };

  config = let
    networkQuadlets =
      mapAttrsToList toQuadletInternal config.services.podman.networks;
  in mkIf pkgs.stdenv.isLinux {
    internal.podman-quadlet-definitions = networkQuadlets;
    assertions = flatten (map (network: network.assertions) networkQuadlets);

    home.file."${config.xdg.configHome}/podman/networks.manifest".text =
      podman-lib.generateManifestText networkQuadlets;
  };
}
